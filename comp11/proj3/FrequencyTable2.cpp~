#include <iostream>

using namespace std;

#include "FrequencyTable.h"

FrequencyTable::FrequencyTable()
{
        for (int i = 0; i < LETTERS; i++) {
                list[i] = empty();
                temp[i] = empty();
                temp_in[i] = empty();
                ltr = 0;
        }
}

bool FrequencyTable::in(string word)
{
        ltr = ifw(word);

        temp_in[ltr] = list[ltr];

        cerr << "running in" << endl;

        while (!isEmpty(temp_in[ltr]) &&
               (first(temp_in[ltr]).word <= word)) {
                if (first(temp_in[ltr]).word == word) {
                        return true;
                }
                temp_in[ltr] = rest(temp_in[ltr]);
        }
        return false;
}

void FrequencyTable::insert(string word)
{
        WordFreq new_data;

        new_data.freq = 1;
        new_data.word = word;

        ltr = ifw(word);

        temp[ltr] = list[ltr];

        cerr << "inside insert" << endl;

        if ((!in(word)) && 
            (isEmpty(list[ltr]) || (word < first(list[ltr]).word))) {
                list[ltr] = prepend(new_data, list[ltr]);
        } else if (!in(word)) {
                while (!isEmpty(temp[ltr]) &&
                       (first(temp[ltr]).word < word) &&
                       (!isEmpty(rest(temp[ltr]))) &&
                       (first(rest(temp[ltr])).word < word)) {
                        temp[ltr] = rest(temp[ltr]);
                }
                insertAfter(new_data, temp[ltr]);
        } else {
                while (!isEmpty(temp[ltr]) &&
                       (first(temp[ltr]).word <= word)) {
                        if (first(temp[ltr]).word == word) {
                                set_freq(temp[ltr], (frequency(word) + 1));
                        }
                        temp[ltr] = rest(temp[ltr]);
                }
        }
            
        cerr << "finished insert" << endl;
        return;
}

int FrequencyTable::frequency(string word)
{
        int frequency = 0;

        ltr = ifw(word);

        temp[ltr] = list[ltr];

        if (in(word)) {
                while (!isEmpty(temp[ltr]) && first(temp[ltr]).word <= word) {
                        if (first(temp[ltr]).word == word) {
                                frequency = first(temp[ltr]).freq;
                                break;
                        }
                        temp[ltr] = rest(temp[ltr]);
                }
        }
        cerr << frequency << endl;
        return frequency;
}

int FrequencyTable::size()
{
        int counter = 0;

        cerr << "inside size" << endl;
        
        ltr = 0;

        for (ltr = 0; ltr < LETTERS; ltr++) {
                temp[ltr] = list[ltr];
                while (temp[ltr] != NULL) {
                        counter++;
                        temp[ltr] = rest(temp[ltr]);
                }
        }
        cerr << counter << endl;

        return counter;
}

void FrequencyTable::get(int n, string *p_word, int *p_frequency)
{
        int list_pos = 0;

        ltr = 0;

        cerr << "inside get" << endl;
        
        for (ltr = 0; ltr < LETTERS; ltr++) {
                temp[ltr] = list[ltr];
                while (temp[ltr] != NULL) {
                        if (list_pos == n) {
                                *p_word = first(temp[ltr]).word;
                                *p_frequency = first(temp[ltr]).freq;
                                return;
                        } else {
                                temp[ltr] = rest(temp[ltr]);
                                list_pos++;
                        }
                }
        }
}
void FrequencyTable::destroy()
{
        for (int i = 0; i < LETTERS; i++) {
                     while (list[i] != NULL) {
                             list[i] = deleteFirst(list[i]);
                     }
                     cout << temp[i] << endl;
        }               
}                                        

int FrequencyTable::ifw(string word)
{
        int ltr_count = 0;
        char letter = 'a';
        
        cerr << "called ifw" << endl;

        while(ltr_count < LETTERS) {
                if (word[0] == letter) {
                        cerr << ltr_count << endl;
                        return ltr_count;
                } else {
                        ltr_count++;
                        letter++;
                }
        }

        return ltr_count;
}
                
        

        
        
