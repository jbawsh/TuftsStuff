//
//  QuickSort.cpp
//  Sorts integers using the QuickSort algorithm


#include "sort3.h"

using namespace std;

QuickSort::QuickSort(){ // constructor
        sortArray.length = 0;
        sortArray.arr = NULL;
        left = 0;
        right = sortArray.length;
}

// reads in a list of integers from stdin and returns an arrayWithLength
void QuickSort::readList(){
        int currentCapacity = 10;
        sortArray.arr = new int[currentCapacity];
        
        while (cin >> sortArray.arr[sortArray.length]) {
                ++sortArray.length;
                if (sortArray.length==currentCapacity) {
                        int *temp = new int[currentCapacity*2];
                        for (int i=0;i<currentCapacity;i++) {
                                temp[i] = sortArray.arr[i];
                        }
                        delete [] sortArray.arr;
                        sortArray.arr = temp;
                        currentCapacity *= 2;
                }
        }
}

void QuickSort::sort(){
        // insertion sort on sortArray
        int index = partition();
        
        if (left < index - 1) {
                right = index - 1;
                sort();
        }
        if (index < right) {
                left = index;
                sort();
        }
}

int QuickSort::partition(){
        int i = left;
        int j = right;
        int tmp;
        int pivot = sortArray.arr[(left + right) / 2];

        while (i <= j) {
                while (sortArray.arr[i] < pivot) {
                        i++;
                }
                while (sortArray.arr[j] > pivot) {
                        j--;
                }
                if (i <= j) {
                        tmp = sortArray.arr[i];
                        sortArray.arr[i] = sortArray.arr[j];
                        sortArray.arr[j] = tmp;
                        i++;
                        j--;
                }
        }

        return i;
}

void QuickSort::printArray(){
        // prints out the integers in sorted order
}
