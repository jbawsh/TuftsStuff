//
//  InsertionSort.cpp
//  Sorts integers using the InsertionSort algorithm


#include "sort2.h"

using namespace std;

InsertionSort::InsertionSort(){ // constructor
        sortArray.length = 0;
        sortArray.arr = NULL;
}

// reads in a list of integers from stdin and returns an arrayWithLength
void InsertionSort::readList(){
        int currentCapacity = 10;
        sortArray.arr = new int[currentCapacity];
        
        while (cin >> sortArray.arr[sortArray.length]) {
                ++sortArray.length;
                if (sortArray.length==currentCapacity) {
                        int *temp = new int[currentCapacity*2];
                        for (int i=0;i<currentCapacity;i++) {
                                temp[i] = sortArray.arr[i];
                        }
                        delete [] sortArray.arr;
                        sortArray.arr = temp;
                        currentCapacity *= 2;
                }
        }
}

void InsertionSort::sort(){
        // insertion sort on sortArray
        for (int i = 1; i < sortArray.length; i++) {
                int j = i;
                while (j > 0 && sortArray.arr[j - 1] > sortArray.arr[j]) {
                        int tmp = sortArray.arr[j];
                        sortArray.arr[j] = sortArray.arr[j - 1];
                        sortArray.arr[j - 1] = tmp;
                        j--;
                }
        }
}

void InsertionSort::printArray(){
        // prints out the integers in sorted order
        for (int i = 0; i < sortArray.length; i++) {
                cout << sortArray.arr[i] << endl;
        }
}
